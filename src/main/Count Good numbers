Problem : https://leetcode.com/problems/count-good-numbers/

Problem explanation :
Input : long long n.
Output : Number of good strings possible of length 'n', using the digits 0-9.
Constraints : 1 <= n <= 10^15 (int->10^8 then it may be long or long long.

Approach : 
1. If n number of places are there and each place can only have 0-9 digits, But for a good number
an even place must have even digits (0,2,4,6,8) - 5
an odd place must have prime digits (2,3,5,7) -4.
2. Every n digited number will have :
(n/2) number of odd places and (n/2)+(n%2) of even places
Now, from (1) we can say that for each odd place we have 4 choices and for even place we have 5 choices.

For example : 
let n=5
_ _ _ _ _
0 1 2 3 4
number of odd places = 5/2 = 2
number of even places = 5/2 + 5%2 = 2+1 = 3
for each odd place = 4 choices
for each even place = 5 choices

_ _ _ _ _
0 1 2 3 4
5*4*5*4*5  = (5^3)*(4^2) = pow(5,no.of even places) * pow(4,no.of odd places).

Solution : 

#define m 1000000007

class Solution {
public:
    long long mpow(long long b,long long x)
    {
      long long ans= (long long)1.0;
      while(x>0)
      {
          if(x%2==0)
          {
             b=(b*b)%m;
             x=x/2;
          }
          else{
              ans=(ans*b)%m;
              x=x-1;
          }
      }
     return ans;
    }
    int countGoodNumbers(long long n) {
        long long odd =n/2;
        long long even=n/2+n%2;
        
        long long o=mpow(4,odd);
        long long e=mpow(5,even);
        
        long long ans = (o * e) % m;
        
        return int(ans);
    }
};

Complexity : 
Time complexity : O(log2 n)
Space complexity : O(1)

NOTE : 
But one thing we must note here is we can't use pow() function available in standard libraries, because they take floating-point values
and result in floating-point values and given we need to return an int, and for that sake do mod 10^9+7.
So, the reasons we must use custom pow() function are : 
1. Floating-point arithmetic: The `pow()` function operates on floating-point numbers and returns a floating-point result. When dealing with large exponents or modulo operations, this can lead to precision loss and potential overflow issues. In the context of this problem, where you're working with large numbers and need to compute modulo operations, using floating-point arithmetic is not appropriate.
2. Efficiency: The `pow()` function is not optimized for integer exponentiation, especially when dealing with large integers. It involves repeated multiplication operations, which can be inefficient for large exponents.
3. Modular arithmetic: In this problem, you need to compute the result modulo a given number (`m`). The `pow()` function doesn't provide a built-in way to perform modular exponentiation efficiently. Performing modular arithmetic with floating-point results can lead to incorrect results due to precision issues.
Instead of using `pow()`, it's better to implement a custom modular exponentiation function that operates directly on integers and computes the result modulo `m` at each step. This ensures accuracy, efficiency, and proper handling of large numbers and modular arithmetic, which are essential for solving this problem correctly.

**For explanation of custom pow() function implementation refer to the problem Pow(x,n).
